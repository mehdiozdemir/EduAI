from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import HTTPBearer
from app.api import users, subjects, performance, agents, auth, exam, education, questions, guidance
from app.admin import routes as admin_routes
from app.database import engine, Base
from app.core.config import settings
from app.utils.startup import initialize_application
import asyncio
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Set timeout for long-running operations
asyncio.get_event_loop().set_debug(True)

# Create database tables
Base.metadata.create_all(bind=engine)

# Initialize application with default data
try:
    initialize_application()
except Exception as e:
    logger.error(f"Failed to initialize application: {str(e)}")
    # Continue anyway - the app can still work without sample data

app = FastAPI(
    title=settings.PROJECT_NAME,
    description=settings.PROJECT_DESCRIPTION,
    version=settings.PROJECT_VERSION,
    # Swagger UI authentication yapılandırması
    openapi_tags=[
        {
            "name": "authentication",
            "description": "Authentication operations. Use /auth/login to get a token, then click 'Authorize' button.",
        },
        {
            "name": "agents",
            "description": "AI Agent operations. **Requires authentication - click 'Authorize' button first!**",
        },
        {
            "name": "users",
            "description": "User management operations.",
        },
        {
            "name": "subjects",
            "description": "Educational subject operations.",
        },
        {
            "name": "performance",
            "description": "Performance tracking operations.",
        },
        {
            "name": "exams",
            "description": "Exam and practice test operations. **Requires authentication for some endpoints.**",
        },
        {
            "name": "education",
            "description": "Education level and system management operations.",
        },
        {
            "name": "admin",
            "description": "Admin panel operations. **Requires admin access - login with admin account first!**",
        },
        {
            "name": "questions",
            "description": "Question generation and evaluation operations.",
        },
        {
            "name": "ai-guidance", 
            "description": "AI Guidance and personalized recommendations based on memory.",
        },
    ],
    # JWT Bearer token authentication for Swagger
    openapi_security_schemes={
        "Bearer": {
            "type": "http",
            "scheme": "bearer",
            "bearerFormat": "JWT",
        }
    }
)

# Request timeout middleware - sadece agent endpoint'leri için
@app.middleware("http")
async def timeout_middleware(request, call_next):
    # Agent istekleri için timeout uygulama
    if "/agents/" in str(request.url.path):
        try:
            response = await asyncio.wait_for(call_next(request), timeout=60.0)
            return response
        except asyncio.TimeoutError:
            from fastapi.responses import JSONResponse
            return JSONResponse(
                status_code=504,
                content={"detail": "AI agent request timeout - please try again"}
            )
    else:
        # Diğer istekler için normal timeout
        return await call_next(request)

# CORS middleware for frontend communication
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.BACKEND_CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# OpenAPI schema'ya security definition ekleme
def custom_openapi():
    if app.openapi_schema:
        return app.openapi_schema
    
    from fastapi.openapi.utils import get_openapi
    openapi_schema = get_openapi(
        title=app.title,
        version=app.version,
        description=app.description,
        routes=app.routes,
    )
    
    # Ensure our bearer scheme is present without clobbering auto-generated ones
    security_schemes = openapi_schema["components"].get("securitySchemes", {})

    # If no explicit "Bearer" scheme (generated by HTTPBearer dep), add one
    if "Bearer" not in security_schemes:
        security_schemes["Bearer"] = {
            "type": "http",
            "scheme": "bearer",
            "bearerFormat": "JWT",
            "description": "Enter JWT token received from /auth/login endpoint"
        }

    # Assign back merged dict
    openapi_schema["components"]["securitySchemes"] = security_schemes
    
    app.openapi_schema = openapi_schema
    return app.openapi_schema

app.openapi = custom_openapi

# Include routers
app.include_router(auth.router)
app.include_router(users.router)
app.include_router(subjects.router)
app.include_router(performance.router, prefix="/api/v1", tags=["performance"])
app.include_router(agents.router)
app.include_router(exam.router, prefix="/api/v1", tags=["exams"])
app.include_router(education.router, prefix="/api/v1", tags=["education"])
app.include_router(questions.router, prefix="/api/v1", tags=["questions"])
app.include_router(guidance.router, prefix="/api/v1", tags=["ai-guidance"])
app.include_router(admin_routes.router, prefix="/api/v1", tags=["admin"])

@app.get("/")
async def root():
    return {"message": "Welcome to EduAI - Intelligent Learning Platform"}

@app.get("/health")
async def health_check():
    return {"status": "healthy"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)
