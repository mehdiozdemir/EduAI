from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import HTTPBearer
from app.api import users, subjects, performance, agents, auth, exam, education
from app.database import engine, Base
from app.core.config import settings

# Create database tables
Base.metadata.create_all(bind=engine)

app = FastAPI(
    title=settings.PROJECT_NAME,
    description=settings.PROJECT_DESCRIPTION,
    version=settings.PROJECT_VERSION,
    # Swagger UI authentication yapılandırması
    openapi_tags=[
        {
            "name": "authentication",
            "description": "Authentication operations. Use /auth/login to get a token, then click 'Authorize' button.",
        },
        {
            "name": "agents",
            "description": "AI Agent operations. **Requires authentication - click 'Authorize' button first!**",
        },
        {
            "name": "users",
            "description": "User management operations.",
        },
        {
            "name": "subjects",
            "description": "Educational subject operations.",
        },
        {
            "name": "performance",
            "description": "Performance tracking operations.",
        },
        {
            "name": "exams",
            "description": "Exam and practice test operations. **Requires authentication for some endpoints.**",
        },
        {
            "name": "education",
            "description": "Education level and system management operations.",
        },
    ],
    # JWT Bearer token authentication for Swagger
    openapi_security_schemes={
        "Bearer": {
            "type": "http",
            "scheme": "bearer",
            "bearerFormat": "JWT",
        }
    }
)

# CORS middleware for frontend communication
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.BACKEND_CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# OpenAPI schema'ya security definition ekleme
def custom_openapi():
    if app.openapi_schema:
        return app.openapi_schema
    
    from fastapi.openapi.utils import get_openapi
    openapi_schema = get_openapi(
        title=app.title,
        version=app.version,
        description=app.description,
        routes=app.routes,
    )
    
    # Ensure our bearer scheme is present without clobbering auto-generated ones
    security_schemes = openapi_schema["components"].get("securitySchemes", {})

    # If no explicit "Bearer" scheme (generated by HTTPBearer dep), add one
    if "Bearer" not in security_schemes:
        security_schemes["Bearer"] = {
            "type": "http",
            "scheme": "bearer",
            "bearerFormat": "JWT",
            "description": "Enter JWT token received from /auth/login endpoint"
        }

    # Assign back merged dict
    openapi_schema["components"]["securitySchemes"] = security_schemes
    
    app.openapi_schema = openapi_schema
    return app.openapi_schema

app.openapi = custom_openapi

# Include routers
app.include_router(auth.router)
app.include_router(users.router)
app.include_router(subjects.router)
app.include_router(performance.router)
app.include_router(agents.router)
app.include_router(exam.router, prefix="/api/v1", tags=["exams"])
app.include_router(education.router, prefix="/api/v1", tags=["education"])

@app.get("/")
async def root():
    return {"message": "Welcome to EduAI - Intelligent Learning Platform"}

@app.get("/health")
async def health_check():
    return {"status": "healthy"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)
